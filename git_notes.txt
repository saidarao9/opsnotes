
DevOps Tools All



***GIT***

1. What is git?
* git is a version control system.
* git helps you keep track of code changes
* git is used to collaborate on code
* git and github are different things

2. Why git?
* Over 70% of developers use Git!
* Developers can work together from anywhere in the world
* Developers can see the full history of the project
* Developers can revert to earlier versions of a project

3. Features of git
* When a file is changed, added or deleted, it is considered modified
* You select the modified files you want to stage
* The stage files are committed, which prompts Git to store a permanent snapshot of the files.
* Git allows you to see the full history of every commit
* You can revert back to any previous commit
* Git doesnot store a separate copy of each file in every commit, but keeps track of changes made in each commit.

4. What is GitHub?
* Git is not the same sa GitHub
* GitHub makes tools that use git
* GitHub is the largest host of source code in the world, and has been owned by Microsoft since 2018

* COnfiguring git fo rthe first time
$git config --global user.name "sachall"
$git config --global user.email "saidharao.chalamalla@gmail.com"

Geenral git features:
$git init
* git now knows that it should watch the folder you initiated it on. git creates a hidden folder to keep track of changes

Staging Files/Adding Files to git repo:
* staged files are files that are ready to be committed to the repository you are working on.
* When you first add files files to an empty repository, they are all untracked. To get Git to track them, you need to stage them, or add them to the staging environment.
$git add  "C:\Users\Saidha\git\git_notes.txt"
* Staging all files in a folder
$ git add --all or git add -AWS/Azure
	
Making a commit:
* Adding commits keep track of our progress and changes we work. Git consider each commit change point or "save point". It is a point in the project you can go back to if you find
  a bug or want to make a change.
* When we commit, we should always include a message
$ git commit -m"adding git_notes file"
[master (root-commit) 78fe7da] adding git_notes file
 1 file changed, 79 insertions(+)
 create mode 100644 git_notes.txt
 
Git commit without a stage:
* Sometimes, when you make small changes, using the staging environment seems like a watse of time. It is possible to commit chnages directly, skipping the staging environment.
$ git commit -a -m"adding git_notes file"
On branch master
nothing to commit, working tree clean

Status of Files and logs:
$ git status
On branch master
nothing to commit, working tree clean

File status in more compact way
$git status --short

Log of a File:
* Log is used to view the history of commits for a repo
$ git log
commit 78fe7da6cf9429a75d67d99db19d78909081a237 (HEAD -> master)
Author: sachall <saidharao.chalamalla@gmail.com>
Date:   Wed Feb 15 13:46:47 2023 +0530

    adding git_notes file
	
$ git log --oneline
78fe7da (HEAD -> master) adding git_notes file
$git log -2 --oneline

$git log --decorate --oneline --graph
Note: Since above is big command, you can assign an alias
$git config --global alias.LoL "log --decorate --oneline --graph"
$git LoL
Log Search:
$git log -G"#define SAMPLES"
Group by author name:
$ git shortlog
saidarao9 (7):
      Initial commit
      Updating Readme fiel
      Merge pull request #1 from saidarao9/saidarao9-patch-1
      adding git notes file
      commit test.txt
      Merge pull request #2 from saidarao9/sample
      git notes updated
$ git shortlog -s
     7  saidarao9

-- Searching commit string in git log
$git log --all --grep "removed file"
$ git log --all --grep "test.txt"
commit 74cbb9b80795f3a680c63bbc3da91783aab4ec42
Merge: 7da0c10 3faddfe
Author: saidarao9 <125445154+saidarao9@users.noreply.github.com>
Date:   Wed Feb 15 15:45:58 2023 +0530

    Merge pull request #2 from saidarao9/sample

    commit test.txt

commit 3faddfe5670d383a6e3331a8ddc1b611d0a33d82 (origin/sample, sample)
Author: saidarao9 <saidharao.chalamalla@gmail.com>
Date:   Wed Feb 15 15:38:18 2023 +0530

    commit test.txt

--Filter logs
$ git log --after '3 days ago'
$ git log --after 2022-12-23
$git log author=authorname
$git log --patch 
$ git log --stat (showing committed files)

$ git show 4f9b50a
commit 4f9b50a6b2d79078bfd7fa4a54181d3cfdc1a8e7
Author: saidarao9 <125445154+saidarao9@users.noreply.github.com>
Date:   Wed Feb 15 14:21:17 2023 +0530

    Initial commit

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..e0376a3
--- /dev/null
+++ b/README.md
@@ -0,0 +1,2 @@
+# opsnotes
+DevOps-Notes




Git Help:
* If you ar ehaving trouble remembering commands or options  for commands , use git help
$git <command> -help or 
$git help --all

Git Branching:
* In Git, a branch is a new/separate version of the main repository.
* Branches allow you to work on different parts of a project without impacting the main branch. 
* When the work is complete, a branch can be merged with the main project.
* We can even switch between branches and work on different projects without them intefering with each other.

Making a new Git branch:
$ git branch sample
$ git branch
* master
  sample -- new brnach

Switching to other branches:
$ git checkout sample
Switched to branch 'sample'
Create new branch and switch to new branch
$ git checkout -b sample1
Switched to a new branch 'sample1'

Deleting a Branch:
$ git branch -d sample1
Deleted branch sample1 (was 78fe7da).

Merging two branches:
* Its preferred to change/switch to master branch before any branch needs to be merged with it.
$ git merge sample
Already up to date.
***********************************************
*** Working with GitHub:****
* create a GitHub account to create your remote repositories. Now, create a new repo where we will be uploading our files files from local repo.
www.github.com - Create new account

Push local repo to GitHub:
* Copy the URL or the link of the repo that we just created.
$git remote add origin https://github.com/saidarao9/opsnotes.git
Note: It will ask for GitHub login
Note: Above specifies that we are adding a remote repository, with the specified URL, as on origin to our local git repo.
FInally,  pushing our master branch to original URL(remote repo)  and set it as the default remote branch. 

$ git push --set-upstream origin master
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Delta compression using up to 6 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 1.40 KiB | 1.40 MiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
remote:
remote: Create a pull request for 'master' on GitHub by visiting:
remote:      https://github.com/saidarao9/opsnotes/pull/new/master
remote:
To https://github.com/saidarao9/opsnotes.git
 * [new branch]      master -> master
branch 'master' set up to track 'origin/master'.   
Go back into GitHub  adn see that repository has been updated.

-- Pushing local repo to github after doing the above process at least once.
First commit all the changes. Then push all changes to oour remote origin 
$ git push origin
Everything up-to-date

** Pull local repo from GitHub:
Git pull is used to pull all the changes from a remote repository into the branch we are working on. 
It is a combination fetch and merge. Use it to update your local git
$ git pull origin
remote: Enumerating objects: 7, done.
remote: Counting objects: 100% (7/7), done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 7 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (7/7), 1.84 KiB | 134.00 KiB/s, done.
From https://github.com/saidarao9/opsnotes
 * [new branch]      main              -> origin/main
 * [new branch]      saidarao9-patch-1 -> origin/saidarao9-patch-1
Already up to date.

**Pull Branch from GitHUb:
-- Check which branches we have and where are we working at the moment.
$ git branch
* main
-- See all local and remote branches:
$ git branch -a
* main
  remotes/origin/HEAD -> origin/main
  remotes/origin/main
  remotes/origin/saidarao9-patch-1
-- Viewing only remote branches:
$ git branch -r
  origin/HEAD -> origin/main
  origin/main
  origin/saidarao9-patch-1

** Push Branch to GitHub:
-- create a new local branch which we will be pushing to GitHub.
$ git checkout -b sample
Switched to a new branch 'sample'

$ git push origin sample
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 6 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 338 bytes | 338.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
remote:
remote: Create a pull request for 'sample' on GitHub by visiting:
remote:      https://github.com/saidarao9/opsnotes/pull/new/sample
remote:
To https://github.com/saidarao9/opsnotes.git
 * [new branch]      sample -> sample

** Git clone from GitHub:
-- We can clone a forked repo from GitHub on our local repo. 
-- Clone is a full copy of a repository, including all logging and versions of files.
-- Move back to the original repository, and click the green code to get the URL to clone.
$ git clone https://github.com/saidarao9/opsnotes.git
$ git clone <copied URL> <folder name>


***Git Undo:
**Git Revert:
-- Revert is the command we use when we want to take a previous commit and add it as a new commit, keeping the log intact.
-- Forst thing, we need to find the point we want to return to. To do that, we need to go through the log 
-- To avoid the long log list, use --oneline option, will give one line per commit
   1. The first seven characters of the commit hash
   2. The commit message
**Git Revert HEAD:
-- Revert the latest commit using 'git revert head' (revert the latest change, and then commit).
-- By adding the option --no-edit, we can skip commit message editor
$git revert HEAD --no-edit
**Git revert to any commit:
-- To revert to earlier commits, use 'git revert HEAD~x' (X being a number. 1 going back one more, 2 going back 2 more, etc).

***Git reset:
-- reset is the command we use when we want to move the repository back to a previous commit, discarding any changes made after that commit.
-- First, get the seven characters of the commit hash from the log for the commit taht you want to go back for.
-- Then we reset our repository back to the specific commit using 'git reset commithash' (commithash being first 7 characters of commit).
$ git reset <commithash>
** Git undo reset:
-- Even though the commits are no longer showing up in the log, it is not removed from the git. 

**Git amend:
-- commit --amend is used to modify the most recent commit. It combines changes in the staging environment with the lastet commit, and creates a new commit.
-- This new commit replaces the latest commit entirely.
-- One of the simplest things you can do with --amend is to change a commit message.
$ git commit --amend -m “<Commit Message>”

************************************************************************************************************
Setting up of username and mail

***Commands:
$ git --version
git version 2.39.2.windows.1

On Unix 
which git

-- create an empty git repository
$git init

$git status
$git add <file path>
$git add
$git commit -m"initial commit"
-- To add a new remote git
$git remote add origin <Remote URL Link>

-- Clone a repository
cd <path where u would like the clone to create a directory>
$git clone https://github.com/saidarao9/opsnotes.git
-- To specify a different name of the directory
$git clone https://github.com/saidarao9/opsnotes.git MyFolder
NOte: Can also use ssh version of the git
$git clone git@github.com:saidarao9/opsnotes.git
-- To clone a bitbucket project
$git clone https://yourusername@bitbucket.org/username/projectname.git

-- Sharing a code
* To share your code, you create a repository on a remote server to which you will copy your local repository
*On the remote server
$git init --bare /pat/to/repo.git
* On the local machine
$git remote add origin ssh://username@server:/path/to/repo.git
* Copy local repository to remote
$git push --set-upstream origin master

-- Setting your username and email
$git config --global user.name "username"
$git config --global user.email mail@example.com
Note: This will store setting in your user's .gitconfig file ex: %USERPROFILE%\.gitconfig

-- To declare an identity for a single repository , use git config inside a repo
$ git config user.email saidha.dba10@gmail.com
$ git config user.name "saidarao9"
NOte: It will stores inside repo .git/config file
-- Remove a global identity
$git config --global --remove-section user.name
$git config --global --remove-section user.mail
-- To force git to look for your identity only within a repository's settings, not global config
$git config --global user.useConfigOnly true

-- Setting up the upstream remote
* Check the remote names 
$ git remote -v
origin  https://github.com/saidarao9/opsnotes.git (fetch)
origin  https://github.com/saidarao9/opsnotes.git (push)
Add upstream if not available
$ git remote add upstream  https://github.com/saidarao9/opsnotes.git
$ git remote -v
origin  https://github.com/saidarao9/opsnotes.git (fetch)
origin  https://github.com/saidarao9/opsnotes.git (push)
upstream        https://github.com/saidarao9/opsnotes.git (fetch)
upstream        https://github.com/saidarao9/opsnotes.git (push)


--Changing Git Remote URL
--Checking
$git remote -v
$git remote set-url origin https://github.com/saidarao9/opsnotes1.git

-- Removing Local copies of Deleted remote branches
-If a remote branch has been deleted, your local repository has to be told to prune the reference to it.
-To prune deleted branches from a specific remote 
$ git fetch https://github.com/saidarao9/opsnotes.git --prune
From https://github.com/saidarao9/opsnotes
 * branch            HEAD       -> FETCH_HEAD
$git fetch --all --prune

-- Displaying commit history graphically with gitk
$gitk






